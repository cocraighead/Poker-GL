var uiObject

var imagesFolder = 'textures/'
var suites = ['c']
var cardNumbersStart = '2'
var cardNumbersEnd = '14'

function __main__(ui){
    uiObject = ui 
    
    var imagesArr = [
      imagesFolder+'wood.jpg',
      imagesFolder+'card_backs.jpg',
      imagesFolder+'double_card_back.png'
   ]

   for(var suitei=0;suitei<suites.length;suitei++){
      for(var cardi=Number(cardNumbersStart);cardi<=Number(cardNumbersEnd);cardi++){
         imagesArr.push(imagesFolder+'card_'+suites[suitei]+cardi+'.png')
      }
   }
   
    loadImages(imagesArr, webGLStart)
}

function loadImages(urls, webGLStart) {
    function loadImage(url, callback) {
        var image = new Image();
        image.src = url;
        image.id = url;
        image.onload = callback;
        return image;
      }

    var images = [];
    var imagesToLoad = urls.length;
   
    // Called each time an image finished loading.
    var onImageLoad = function() {
      --imagesToLoad;
      // If all the images are loaded call the callback.
      if (imagesToLoad == 0) {
         webGLStart(images);
      }
    };
   
    for (var ii = 0; ii < imagesToLoad; ++ii) {
      var image = loadImage(urls[ii], onImageLoad);
      images.push(image);
    }
  }

//
//  Compile a shader
//
function CompileShader(gl,id)
{
   //  Get shader by id
   var src = document.getElementById(id);
   //  Create shader based on type setting
   var shader;
   if (src.type == "x-shader/x-fragment")
      shader = gl.createShader(gl.FRAGMENT_SHADER);
   else if (src.type == "x-shader/x-vertex")
      shader = gl.createShader(gl.VERTEX_SHADER);
   else
      return null;
   //  Read source into str
   var str = "";
   var k = src.firstChild;
   while (k)
   {
      if (k.nodeType == 3) str += k.textContent;
      k = k.nextSibling;
   }
   gl.shaderSource(shader, str);
   //  Compile the shader
   gl.compileShader(shader);
   //  Check for errors
   if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) == 0)
      alert(gl.getShaderInfoLog(shader));
   //  Return shader
   return shader;
}

//
//  Compile shader program
//
function CompileShaderProg(gl,vert,frag)
{
   //  Compile the program
   var prog  = gl.createProgram();
   gl.attachShader(prog , CompileShader(gl,vert));
   gl.attachShader(prog , CompileShader(gl,frag));
   gl.linkProgram(prog);
   //  Check for errors
   if (gl.getProgramParameter(prog, gl.LINK_STATUS) == 0)
      alert(gl.getProgramInfoLog(prog));
   //  Return program
   return prog;
}

var gl,canvas;
function webGLStart(images)
{
   //  Set canvas
   canvas = document.getElementById("canvas");
   //  Select canvas size
   var size = Math.min(window.innerWidth,window.innerHeight)-10;
   canvas.width  = window.innerWidth - 210;
   canvas.height = window.innerHeight - 10;
   var xStart = (canvas.width - 2*size) / 2;
   //  Start WebGL
   if (!window.WebGLRenderingContext)
   {
      alert("Your browser does not support WebGL. See http://get.webgl.org");
      return;
   }
   try
   {
      gl = canvas.getContext("experimental-webgl");
   }
   catch(e)
   {}
   if (!gl)
   {
      alert("Can't get WebGL");
      return;
   }
   // persective vars
   var fov = 57;
   var dim = 2.5;
   var asp = 2;
   //  Set viewport to entire canvas
   gl.viewport(xStart,0,size*2,size);

   //  Load Shader
   var prog = CompileShaderProg(gl,"shader-vs","shader-fs");

   //  Set projection
   var ProjectionMatrix = new mat4();
   ProjectionMatrix.perspective(fov,asp,dim/16,dim*16);

   //  Vertex array count
   var n = 36;
   //  Cube vertex, color and texture
   var cube_data = 
   [
      -1,-1, 1, 0,0,1,  .5,.5,.5,   0,1,
      +1,-1, 1, 0,0,1,  .5,.5,.5,   1,1,
      -1,+1, 1, 0,0,1,  .5,.5,.5,   0,0,
      -1,+1, 1, 0,0,1,  .5,.5,.5,   0,0,
      +1,-1, 1, 0,0,1,  .5,.5,.5,   1,1,
      +1,+1, 1, 0,0,1,  .5,.5,.5,   1,0,
      +1,-1,-1, 0,0,-1,  .5,.5,.5,   0,1,
      -1,-1,-1, 0,0,-1,  .5,.5,.5,   1,1,
      +1,+1,-1, 0,0,-1,  .5,.5,.5,   0,0,
      +1,+1,-1, 0,0,-1,  .5,.5,.5,   0,0,
      -1,-1,-1, 0,0,-1,  .5,.5,.5,   1,1,
      -1,+1,-1, 0,0,-1,  .5,.5,.5,   1,0,
      +1,-1,+1, 1,0,0,  .5,.5,.5,   0,1,
      +1,-1,-1, 1,0,0,  .5,.5,.5,   1,1,
      +1,+1,+1, 1,0,0,  .5,.5,.5,   0,0,
      +1,+1,+1, 1,0,0,  .5,.5,.5,   0,0,
      +1,-1,-1, 1,0,0,  .5,.5,.5,   1,1,
      +1,+1,-1, 1,0,0,  .5,.5,.5,   1,0,
      -1,-1,-1, -1,0,0,  .5,.5,.5,   0,1,
      -1,-1,+1, -1,0,0,  .5,.5,.5,   1,1,
      -1,+1,-1, -1,0,0,  .5,.5,.5,   0,0,
      -1,+1,-1, -1,0,0,  .5,.5,.5,   0,0,
      -1,-1,+1, -1,0,0,  .5,.5,.5,   1,1,
      -1,+1,+1, -1,0,0,  .5,.5,.5,   1,0,
      -1,+1,+1, 0,1,0,  .5,.5,.5,   0,1,
      +1,+1,+1, 0,1,0,  .5,.5,.5,   1,1,
      -1,+1,-1, 0,1,0,  .5,.5,.5,   0,0,
      -1,+1,-1, 0,1,0,  .5,.5,.5,   0,0,
      +1,+1,+1, 0,1,0,  .5,.5,.5,   1,1,
      +1,+1,-1, 0,1,0,  .5,.5,.5,   1,0,
      -1,-1,-1, 0,-1,0,  .5,.5,.5,   0,1,
      +1,-1,-1, 0,-1,0,  .5,.5,.5,   1,1, 
      -1,-1,+1, 0,-1,0,  .5,.5,.5,   0,0, 
      -1,-1,+1, 0,-1,0,  .5,.5,.5,   0,0,
      +1,-1,-1, 0,-1,0,  .5,.5,.5,   1,1, 
      +1,-1,+1, 0,-1,0,  .5,.5,.5,   1,0,
   ];
   var cube = gl.createBuffer();
   gl.bindBuffer(gl.ARRAY_BUFFER,cube);
   gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(cube_data),gl.STATIC_DRAW);

   var card_data = 
   [
      -1,-1, 1, 0,0,1,  .5,.5,.5,   0,1,
      +1,-1, 1, 0,0,1,  .5,.5,.5,   .5,1,
      -1,+1, 1, 0,0,1,  .5,.5,.5,   0,0,
      -1,+1, 1, 0,0,1,  .5,.5,.5,   0,0,
      +1,-1, 1, 0,0,1,  .5,.5,.5,   .5,1,
      +1,+1, 1, 0,0,1,  .5,.5,.5,   .5,0,
      +1,-1,-1, 0,0,-1,  .5,.5,.5,   0,1,
      -1,-1,-1, 0,0,-1,  .5,.5,.5,   .5,1,
      +1,+1,-1, 0,0,-1,  .5,.5,.5,   0,0,
      +1,+1,-1, 0,0,-1,  .5,.5,.5,   0,0,
      -1,-1,-1, 0,0,-1,  .5,.5,.5,   .5,1,
      -1,+1,-1, 0,0,-1,  .5,.5,.5,   .5,0,
      +1,-1,+1, 1,0,0,  .5,.5,.5,   0,1,
      +1,-1,-1, 1,0,0,  .5,.5,.5,   .5,1,
      +1,+1,+1, 1,0,0,  .5,.5,.5,   0,0,
      +1,+1,+1, 1,0,0,  .5,.5,.5,   0,0,
      +1,-1,-1, 1,0,0,  .5,.5,.5,   .5,1,
      +1,+1,-1, 1,0,0,  .5,.5,.5,   .5,0,
      -1,-1,-1, -1,0,0,  .5,.5,.5,   0,1,
      -1,-1,+1, -1,0,0,  .5,.5,.5,   .5,1,
      -1,+1,-1, -1,0,0,  .5,.5,.5,   0,0,
      -1,+1,-1, -1,0,0,  .5,.5,.5,   0,0,
      -1,-1,+1, -1,0,0,  .5,.5,.5,   .5,1,
      -1,+1,+1, -1,0,0,  .5,.5,.5,   .5,0,
      -1,+1,+1, 0,1,0,  .5,.5,.5,   .5,1,  // back left
      +1,+1,+1, 0,1,0,  .5,.5,.5,   1,1, // back right
      -1,+1,-1, 0,1,0,  .5,.5,.5,   .5,0, // front left
      -1,+1,-1, 0,1,0,  .5,.5,.5,   .5,0, // front left
      +1,+1,+1, 0,1,0,  .5,.5,.5,   1,1, // back right
      +1,+1,-1, 0,1,0,  .5,.5,.5,   1,0, // front right
      -1,-1,-1, 0,-1,0,  .5,.5,.5,   0,1, 
      +1,-1,-1, 0,-1,0,  .5,.5,.5,   .5,1, 
      -1,-1,+1, 0,-1,0,  .5,.5,.5,   0,0,
      -1,-1,+1, 0,-1,0,  .5,.5,.5,   0,0,
      +1,-1,-1, 0,-1,0,  .5,.5,.5,   .5,1,
      +1,-1,+1, 0,-1,0,  .5,.5,.5,   .5,0,
   ];
   var card = gl.createBuffer();
   gl.bindBuffer(gl.ARRAY_BUFFER,card);
   gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(card_data),gl.STATIC_DRAW);

   var n_peekCard = 420;
   var peek_card_data = [
      1.465954,-1.395275,-0.991144,-0.0196,-0.9998,0.0000,.5,.5,.5,0.625000,0.000000,
1.271071,-1.391447,0.008022,-0.0196,-0.9998,0.0000,.5,.5,.5,0.617188,0.250000,
1.271071,-1.391447,-0.991144,-0.0196,-0.9998,0.0000,.5,.5,.5,0.617188,0.000000,
1.465954,-1.395274,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.625000,0.250000,
1.296494,-1.391447,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.617188,0.500000,
1.271071,-1.391447,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.617188,0.250000,
1.491377,-1.395274,0.008022,0.0196,0.9998,0.0000,.5,.5,.5,0.625000,0.500000,
1.296494,-1.391447,-0.991144,0.0196,0.9998,0.0000,.5,.5,.5,0.617188,0.750000,
1.296494,-1.391447,0.008022,0.0196,0.9998,0.0000,.5,.5,.5,0.617188,0.500000,
1.296494,-1.391447,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.617188,0.750000,
1.465954,-1.395275,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.625000,1.000000,
1.271071,-1.391447,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.617188,1.000000,
-0.014906,0.446091,0.008022,0.0000,1.0000,0.0000,.5,.5,.5,0.375000,0.500000,
-0.040330,0.446091,-0.991144,0.0000,1.0000,0.0000,.5,.5,.5,0.125000,0.750000,
-0.040330,0.446091,0.008022,0.0000,1.0000,0.0000,.5,.5,.5,0.125000,0.500000,
1.465954,-1.395274,0.008022,0.0000,-1.0000,0.0000,.5,.5,.5,0.875000,0.500000,
1.491377,-1.395275,-0.991144,0.0000,-1.0000,0.0000,.5,.5,.5,0.625000,0.750000,
1.491377,-1.395274,0.008022,0.0000,-1.0000,0.0000,.5,.5,.5,0.625000,0.500000,
-0.014906,-0.526545,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.500000,0.750000,
-0.040330,0.446091,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.375000,1.000000,
-0.014906,0.446091,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.375000,0.750000,
-0.014906,-0.526545,0.008022,1.0000,-0.0000,0.0000,.5,.5,.5,0.500000,0.500000,
-0.014906,0.446091,-0.991144,1.0000,-0.0000,0.0000,.5,.5,.5,0.375000,0.750000,
-0.014906,0.446091,0.008022,1.0000,-0.0000,0.0000,.5,.5,.5,0.375000,0.500000,
-0.040330,-0.526545,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.500000,0.250000,
-0.014906,0.446091,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.375000,0.500000,
-0.040330,0.446091,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.375000,0.250000,
-0.040330,-0.526545,-0.991144,-1.0000,-0.0000,0.0000,.5,.5,.5,0.500000,0.000000,
-0.040330,0.446091,0.008022,-1.0000,-0.0000,0.0000,.5,.5,.5,0.375000,0.250000,
-0.040330,0.446091,-0.991144,-1.0000,-0.0000,0.0000,.5,.5,.5,0.375000,0.000000,
0.328797,-0.952073,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.554688,0.750000,
0.370474,-1.012863,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.562500,1.000000,
0.303374,-0.952073,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.554688,1.000000,
0.395897,-1.012863,0.008022,0.6714,0.7411,-0.0000,.5,.5,.5,0.562500,0.500000,
0.328797,-0.952073,-0.991144,0.6714,0.7411,-0.0000,.5,.5,.5,0.554688,0.750000,
0.328797,-0.952073,0.008022,0.6714,0.7411,-0.0000,.5,.5,.5,0.554688,0.500000,
0.370474,-1.012863,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.562500,0.250000,
0.328797,-0.952073,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.554688,0.500000,
0.303374,-0.952073,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.554688,0.250000,
0.370474,-1.012863,-0.991144,-0.6714,-0.7411,0.0000,.5,.5,.5,0.562500,0.000000,
0.303374,-0.952073,0.008022,-0.6714,-0.7411,0.0000,.5,.5,.5,0.554688,0.250000,
0.303374,-0.952073,-0.991144,-0.6714,-0.7411,0.0000,.5,.5,.5,0.554688,0.000000,
0.678493,-1.195232,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.585938,0.750000,
0.782508,-1.256022,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.593750,1.000000,
0.653069,-1.195232,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.585938,1.000000,
0.807931,-1.256022,0.008022,0.4251,0.9051,-0.0000,.5,.5,.5,0.593750,0.500000,
0.678493,-1.195232,-0.991144,0.4251,0.9051,-0.0000,.5,.5,.5,0.585938,0.750000,
0.678493,-1.195232,0.008022,0.4251,0.9051,-0.0000,.5,.5,.5,0.585938,0.500000,
0.782508,-1.256022,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.593750,0.250000,
0.678493,-1.195232,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.585938,0.500000,
0.653069,-1.195232,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.585938,0.250000,
0.782508,-1.256022,-0.991144,-0.4251,-0.9051,0.0000,.5,.5,.5,0.593750,0.000000,
0.653069,-1.195232,0.008022,-0.4251,-0.9051,0.0000,.5,.5,.5,0.585938,0.250000,
0.653069,-1.195232,-0.991144,-0.4251,-0.9051,0.0000,.5,.5,.5,0.585938,0.000000,
0.111218,-0.769704,-0.991144,-0.7455,-0.6665,0.0000,.5,.5,.5,0.531250,0.000000,
0.056864,-0.708914,0.008022,-0.7455,-0.6665,0.0000,.5,.5,.5,0.523438,0.250000,
0.056864,-0.708914,-0.991144,-0.7455,-0.6665,0.0000,.5,.5,.5,0.523438,0.000000,
0.111218,-0.769704,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.531250,0.250000,
0.082288,-0.708914,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.523438,0.500000,
0.056864,-0.708914,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.523438,0.250000,
0.136642,-0.769704,0.008022,0.7455,0.6665,-0.0000,.5,.5,.5,0.531250,0.500000,
0.082288,-0.708914,-0.991144,0.7455,0.6665,-0.0000,.5,.5,.5,0.523438,0.750000,
0.082288,-0.708914,0.008022,0.7455,0.6665,-0.0000,.5,.5,.5,0.523438,0.500000,
0.082288,-0.708914,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.523438,0.750000,
0.111218,-0.769704,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.531250,1.000000,
0.056864,-0.708914,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.523438,1.000000,
0.960867,-1.316812,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.601562,0.750000,
1.078844,-1.361315,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.609375,1.000000,
0.935444,-1.316812,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.601562,1.000000,
1.104267,-1.361315,0.008022,0.2964,0.9551,-0.0000,.5,.5,.5,0.609375,0.500000,
0.960867,-1.316812,-0.991144,0.2964,0.9551,-0.0000,.5,.5,.5,0.601562,0.750000,
0.960867,-1.316812,0.008022,0.2964,0.9551,-0.0000,.5,.5,.5,0.601562,0.500000,
1.078844,-1.361315,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.609375,0.250000,
0.960867,-1.316812,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.601562,0.500000,
0.935444,-1.316812,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.601562,0.250000,
1.078844,-1.361315,-0.991144,-0.2964,-0.9551,0.0000,.5,.5,.5,0.609375,0.000000,
0.935444,-1.316812,0.008022,-0.2964,-0.9551,0.0000,.5,.5,.5,0.601562,0.250000,
0.935444,-1.316812,-0.991144,-0.2964,-0.9551,0.0000,.5,.5,.5,0.601562,0.000000,
0.547134,-1.134442,-0.991144,-0.5445,-0.8387,0.0000,.5,.5,.5,0.578125,0.000000,
0.453499,-1.073653,0.008022,-0.5445,-0.8387,0.0000,.5,.5,.5,0.570312,0.250000,
0.453499,-1.073653,-0.991144,-0.5445,-0.8387,0.0000,.5,.5,.5,0.570312,0.000000,
0.547134,-1.134442,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.578125,0.250000,
0.478922,-1.073653,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.570312,0.500000,
0.453499,-1.073653,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.570312,0.250000,
0.572557,-1.134442,0.008022,0.5445,0.8387,0.0000,.5,.5,.5,0.578125,0.500000,
0.478922,-1.073653,-0.991144,0.5445,0.8387,0.0000,.5,.5,.5,0.570312,0.750000,
0.478922,-1.073653,0.008022,0.5445,0.8387,0.0000,.5,.5,.5,0.570312,0.500000,
0.478922,-1.073653,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.570312,0.750000,
0.547134,-1.134442,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.578125,1.000000,
0.453499,-1.073653,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.570312,1.000000,
0.239890,-0.891284,-0.991144,-0.6678,-0.7443,0.0000,.5,.5,.5,0.546875,0.000000,
0.172142,-0.830494,0.008022,-0.6678,-0.7443,0.0000,.5,.5,.5,0.539062,0.250000,
0.172142,-0.830494,-0.991144,-0.6678,-0.7443,0.0000,.5,.5,.5,0.539062,0.000000,
0.239890,-0.891283,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.546875,0.250000,
0.197566,-0.830494,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.539062,0.500000,
0.172142,-0.830494,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.539062,0.250000,
0.265314,-0.891283,0.008022,0.6678,0.7443,-0.0000,.5,.5,.5,0.546875,0.500000,
0.197566,-0.830494,-0.991144,0.6678,0.7443,-0.0000,.5,.5,.5,0.539062,0.750000,
0.197566,-0.830494,0.008022,0.6678,0.7443,-0.0000,.5,.5,.5,0.539062,0.500000,
0.197566,-0.830494,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.539062,0.750000,
0.239890,-0.891284,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.546875,1.000000,
0.172142,-0.830494,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.539062,1.000000,
0.006451,-0.587335,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.507812,0.750000,
0.007605,-0.648124,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.515625,1.000000,
-0.018973,-0.587335,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.507812,1.000000,
0.033029,-0.648124,0.008022,0.9163,0.4006,0.0000,.5,.5,.5,0.515625,0.500000,
0.006451,-0.587335,-0.991144,0.9163,0.4006,0.0000,.5,.5,.5,0.507812,0.750000,
0.006451,-0.587335,0.008022,0.9163,0.4006,0.0000,.5,.5,.5,0.507812,0.500000,
0.007605,-0.648124,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.515625,0.250000,
0.006451,-0.587335,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.507812,0.500000,
-0.018973,-0.587335,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.507812,0.250000,
0.007605,-0.648124,-0.991144,-0.9163,-0.4006,0.0000,.5,.5,.5,0.515625,0.000000,
-0.018973,-0.587335,0.008022,-0.9163,-0.4006,0.0000,.5,.5,.5,0.507812,0.250000,
-0.018973,-0.587335,-0.991144,-0.9163,-0.4006,0.0000,.5,.5,.5,0.507812,0.000000,
-0.018973,-0.587335,-0.991144,-0.9435,-0.3315,0.0000,.5,.5,.5,0.507812,0.000000,
-0.040330,-0.526545,0.008022,-0.9435,-0.3315,0.0000,.5,.5,.5,0.500000,0.250000,
-0.040330,-0.526545,-0.991144,-0.9435,-0.3315,0.0000,.5,.5,.5,0.500000,0.000000,
-0.018973,-0.587335,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.507812,0.250000,
-0.014906,-0.526545,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.500000,0.500000,
-0.040330,-0.526545,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.500000,0.250000,
0.006451,-0.587335,0.008022,0.9435,0.3315,0.0000,.5,.5,.5,0.507812,0.500000,
-0.014906,-0.526545,-0.991144,0.9435,0.3315,0.0000,.5,.5,.5,0.500000,0.750000,
-0.014906,-0.526545,0.008022,0.9435,0.3315,0.0000,.5,.5,.5,0.500000,0.500000,
-0.014906,-0.526545,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.500000,0.750000,
-0.018973,-0.587335,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.507812,1.000000,
-0.040330,-0.526545,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.500000,1.000000,
0.033029,-0.648124,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.515625,0.750000,
0.056864,-0.708914,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.523438,1.000000,
0.007605,-0.648124,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.515625,1.000000,
0.082288,-0.708914,0.008022,0.7769,0.6296,-0.0000,.5,.5,.5,0.523438,0.500000,
0.033029,-0.648124,-0.991144,0.7769,0.6296,-0.0000,.5,.5,.5,0.515625,0.750000,
0.033029,-0.648124,0.008022,0.7769,0.6296,-0.0000,.5,.5,.5,0.515625,0.500000,
0.056864,-0.708914,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.523438,0.250000,
0.033029,-0.648124,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.515625,0.500000,
0.007605,-0.648124,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.515625,0.250000,
0.056864,-0.708914,-0.991144,-0.7769,-0.6296,0.0000,.5,.5,.5,0.523438,0.000000,
0.007605,-0.648124,0.008022,-0.7769,-0.6296,0.0000,.5,.5,.5,0.515625,0.250000,
0.007605,-0.648124,-0.991144,-0.7769,-0.6296,0.0000,.5,.5,.5,0.515625,0.000000,
0.136642,-0.769704,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.531250,0.750000,
0.172142,-0.830494,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.539062,1.000000,
0.111218,-0.769704,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.531250,1.000000,
0.197566,-0.830494,0.008022,0.7063,0.7079,0.0000,.5,.5,.5,0.539062,0.500000,
0.136642,-0.769704,-0.991144,0.7063,0.7079,0.0000,.5,.5,.5,0.531250,0.750000,
0.136642,-0.769704,0.008022,0.7063,0.7079,0.0000,.5,.5,.5,0.531250,0.500000,
0.172142,-0.830494,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.539062,0.250000,
0.136642,-0.769704,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.531250,0.500000,
0.111218,-0.769704,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.531250,0.250000,
0.172142,-0.830494,-0.991144,-0.7063,-0.7079,0.0000,.5,.5,.5,0.539062,0.000000,
0.111218,-0.769704,0.008022,-0.7063,-0.7079,0.0000,.5,.5,.5,0.531250,0.250000,
0.111218,-0.769704,-0.991144,-0.7063,-0.7079,0.0000,.5,.5,.5,0.531250,0.000000,
0.303374,-0.952073,-0.991144,-0.6916,-0.7223,0.0000,.5,.5,.5,0.554688,0.000000,
0.239890,-0.891283,0.008022,-0.6916,-0.7223,0.0000,.5,.5,.5,0.546875,0.250000,
0.239890,-0.891284,-0.991144,-0.6916,-0.7223,0.0000,.5,.5,.5,0.546875,0.000000,
0.303374,-0.952073,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.554688,0.250000,
0.265314,-0.891283,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.546875,0.500000,
0.239890,-0.891283,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.546875,0.250000,
0.328797,-0.952073,0.008022,0.6916,0.7223,0.0000,.5,.5,.5,0.554688,0.500000,
0.265314,-0.891284,-0.991144,0.6916,0.7223,0.0000,.5,.5,.5,0.546875,0.750000,
0.265314,-0.891283,0.008022,0.6916,0.7223,0.0000,.5,.5,.5,0.546875,0.500000,
0.265314,-0.891284,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.546875,0.750000,
0.303374,-0.952073,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.554688,1.000000,
0.239890,-0.891284,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.546875,1.000000,
0.395897,-1.012863,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.562500,0.750000,
0.453499,-1.073653,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.570312,1.000000,
0.370474,-1.012863,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.562500,1.000000,
0.478922,-1.073653,0.008022,0.5908,0.8068,-0.0000,.5,.5,.5,0.570312,0.500000,
0.395897,-1.012863,-0.991144,0.5908,0.8068,-0.0000,.5,.5,.5,0.562500,0.750000,
0.395897,-1.012863,0.008022,0.5908,0.8068,-0.0000,.5,.5,.5,0.562500,0.500000,
0.453499,-1.073653,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.570312,0.250000,
0.395897,-1.012863,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.562500,0.500000,
0.370474,-1.012863,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.562500,0.250000,
0.453499,-1.073653,-0.991144,-0.5908,-0.8068,0.0000,.5,.5,.5,0.570312,0.000000,
0.370474,-1.012863,0.008022,-0.5908,-0.8068,0.0000,.5,.5,.5,0.562500,0.250000,
0.370474,-1.012863,-0.991144,-0.5908,-0.8068,0.0000,.5,.5,.5,0.562500,0.000000,
0.653069,-1.195232,-0.991144,-0.4977,-0.8673,0.0000,.5,.5,.5,0.585938,0.000000,
0.547134,-1.134442,0.008022,-0.4977,-0.8673,0.0000,.5,.5,.5,0.578125,0.250000,
0.547134,-1.134442,-0.991144,-0.4977,-0.8673,0.0000,.5,.5,.5,0.578125,0.000000,
0.653069,-1.195232,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.585938,0.250000,
0.572557,-1.134442,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.578125,0.500000,
0.547134,-1.134442,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.578125,0.250000,
0.678493,-1.195232,0.008022,0.4977,0.8673,0.0000,.5,.5,.5,0.585938,0.500000,
0.572557,-1.134442,-0.991144,0.4977,0.8673,0.0000,.5,.5,.5,0.578125,0.750000,
0.572557,-1.134442,0.008022,0.4977,0.8673,0.0000,.5,.5,.5,0.578125,0.500000,
0.572557,-1.134442,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.578125,0.750000,
0.653069,-1.195232,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.585938,1.000000,
0.547134,-1.134442,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.578125,1.000000,
0.935444,-1.316812,-0.991144,-0.3694,-0.9293,0.0000,.5,.5,.5,0.601562,0.000000,
0.782508,-1.256022,0.008022,-0.3694,-0.9293,0.0000,.5,.5,.5,0.593750,0.250000,
0.782508,-1.256022,-0.991144,-0.3694,-0.9293,0.0000,.5,.5,.5,0.593750,0.000000,
0.935444,-1.316812,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.601562,0.250000,
0.807931,-1.256022,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.593750,0.500000,
0.782508,-1.256022,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.593750,0.250000,
0.960867,-1.316812,0.008022,0.3694,0.9293,0.0000,.5,.5,.5,0.601562,0.500000,
0.807931,-1.256022,-0.991144,0.3694,0.9293,0.0000,.5,.5,.5,0.593750,0.750000,
0.807931,-1.256022,0.008022,0.3694,0.9293,0.0000,.5,.5,.5,0.593750,0.500000,
0.807931,-1.256022,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.593750,0.750000,
0.935444,-1.316812,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.601562,1.000000,
0.782508,-1.256022,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.593750,1.000000,
1.104267,-1.361315,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.609375,0.750000,
1.271071,-1.391447,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.617188,1.000000,
1.078844,-1.361315,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.609375,1.000000,
1.296494,-1.391447,0.008022,0.1549,0.9879,0.0000,.5,.5,.5,0.617188,0.500000,
1.104267,-1.361315,-0.991144,0.1549,0.9879,0.0000,.5,.5,.5,0.609375,0.750000,
1.104267,-1.361315,0.008022,0.1549,0.9879,0.0000,.5,.5,.5,0.609375,0.500000,
1.271071,-1.391447,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.617188,0.250000,
1.104267,-1.361315,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.609375,0.500000,
1.078844,-1.361315,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.609375,0.250000,
1.271071,-1.391447,-0.991144,-0.1549,-0.9879,0.0000,.5,.5,.5,0.617188,0.000000,
1.078844,-1.361315,0.008022,-0.1549,-0.9879,0.0000,.5,.5,.5,0.609375,0.250000,
1.078844,-1.361315,-0.991144,-0.1549,-0.9879,0.0000,.5,.5,.5,0.609375,0.000000,
1.465954,-1.395275,-0.991144,-0.0196,-0.9998,0.0000,.5,.5,.5,0.625000,0.000000,
1.465954,-1.395274,0.008022,-0.0196,-0.9998,0.0000,.5,.5,.5,0.625000,0.250000,
1.271071,-1.391447,0.008022,-0.0196,-0.9998,0.0000,.5,.5,.5,0.617188,0.250000,
1.465954,-1.395274,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.625000,0.250000,
1.491377,-1.395274,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.625000,0.500000,
1.296494,-1.391447,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.617188,0.500000,
1.491377,-1.395274,0.008022,0.0196,0.9998,0.0000,.5,.5,.5,0.625000,0.500000,
1.491377,-1.395275,-0.991144,0.0196,0.9998,0.0000,.5,.5,.5,0.625000,0.750000,
1.296494,-1.391447,-0.991144,0.0196,0.9998,0.0000,.5,.5,.5,0.617188,0.750000,
1.296494,-1.391447,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.617188,0.750000,
1.491377,-1.395275,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.625000,0.750000,
1.465954,-1.395275,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.625000,1.000000,
-0.014906,0.446091,0.008022,0.0000,1.0000,0.0000,.5,.5,.5,0.375000,0.500000,
-0.014906,0.446091,-0.991144,0.0000,1.0000,0.0000,.5,.5,.5,0.375000,0.750000,
-0.040330,0.446091,-0.991144,0.0000,1.0000,0.0000,.5,.5,.5,0.125000,0.750000,
1.465954,-1.395274,0.008022,0.0000,-1.0000,0.0000,.5,.5,.5,0.875000,0.500000,
1.465954,-1.395275,-0.991144,0.0000,-1.0000,0.0000,.5,.5,.5,0.875000,0.750000,
1.491377,-1.395275,-0.991144,0.0000,-1.0000,0.0000,.5,.5,.5,0.625000,0.750000,
-0.014906,-0.526545,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.500000,0.750000,
-0.040330,-0.526545,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.500000,1.000000,
-0.040330,0.446091,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.375000,1.000000,
-0.014906,-0.526545,0.008022,1.0000,-0.0000,0.0000,.5,.5,.5,0.500000,0.500000,
-0.014906,-0.526545,-0.991144,1.0000,-0.0000,0.0000,.5,.5,.5,0.500000,0.750000,
-0.014906,0.446091,-0.991144,1.0000,-0.0000,0.0000,.5,.5,.5,0.375000,0.750000,
-0.040330,-0.526545,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.500000,0.250000,
-0.014906,-0.526545,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.500000,0.500000,
-0.014906,0.446091,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.375000,0.500000,
-0.040330,-0.526545,-0.991144,-1.0000,-0.0000,0.0000,.5,.5,.5,0.500000,0.000000,
-0.040330,-0.526545,0.008022,-1.0000,-0.0000,0.0000,.5,.5,.5,0.500000,0.250000,
-0.040330,0.446091,0.008022,-1.0000,-0.0000,0.0000,.5,.5,.5,0.375000,0.250000,
0.328797,-0.952073,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.554688,0.750000,
0.395897,-1.012863,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.562500,0.750000,
0.370474,-1.012863,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.562500,1.000000,
0.395897,-1.012863,0.008022,0.6714,0.7411,-0.0000,.5,.5,.5,0.562500,0.500000,
0.395897,-1.012863,-0.991144,0.6714,0.7411,-0.0000,.5,.5,.5,0.562500,0.750000,
0.328797,-0.952073,-0.991144,0.6714,0.7411,-0.0000,.5,.5,.5,0.554688,0.750000,
0.370474,-1.012863,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.562500,0.250000,
0.395897,-1.012863,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.562500,0.500000,
0.328797,-0.952073,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.554688,0.500000,
0.370474,-1.012863,-0.991144,-0.6714,-0.7411,0.0000,.5,.5,.5,0.562500,0.000000,
0.370474,-1.012863,0.008022,-0.6714,-0.7411,0.0000,.5,.5,.5,0.562500,0.250000,
0.303374,-0.952073,0.008022,-0.6714,-0.7411,0.0000,.5,.5,.5,0.554688,0.250000,
0.678493,-1.195232,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.585938,0.750000,
0.807931,-1.256022,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.593750,0.750000,
0.782508,-1.256022,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.593750,1.000000,
0.807931,-1.256022,0.008022,0.4251,0.9051,-0.0000,.5,.5,.5,0.593750,0.500000,
0.807931,-1.256022,-0.991144,0.4251,0.9051,-0.0000,.5,.5,.5,0.593750,0.750000,
0.678493,-1.195232,-0.991144,0.4251,0.9051,-0.0000,.5,.5,.5,0.585938,0.750000,
0.782508,-1.256022,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.593750,0.250000,
0.807931,-1.256022,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.593750,0.500000,
0.678493,-1.195232,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.585938,0.500000,
0.782508,-1.256022,-0.991144,-0.4251,-0.9051,0.0000,.5,.5,.5,0.593750,0.000000,
0.782508,-1.256022,0.008022,-0.4251,-0.9051,0.0000,.5,.5,.5,0.593750,0.250000,
0.653069,-1.195232,0.008022,-0.4251,-0.9051,0.0000,.5,.5,.5,0.585938,0.250000,
0.111218,-0.769704,-0.991144,-0.7455,-0.6665,0.0000,.5,.5,.5,0.531250,0.000000,
0.111218,-0.769704,0.008022,-0.7455,-0.6665,0.0000,.5,.5,.5,0.531250,0.250000,
0.056864,-0.708914,0.008022,-0.7455,-0.6665,0.0000,.5,.5,.5,0.523438,0.250000,
0.111218,-0.769704,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.531250,0.250000,
0.136642,-0.769704,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.531250,0.500000,
0.082288,-0.708914,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.523438,0.500000,
0.136642,-0.769704,0.008022,0.7455,0.6665,-0.0000,.5,.5,.5,0.531250,0.500000,
0.136642,-0.769704,-0.991144,0.7455,0.6665,-0.0000,.5,.5,.5,0.531250,0.750000,
0.082288,-0.708914,-0.991144,0.7455,0.6665,-0.0000,.5,.5,.5,0.523438,0.750000,
0.082288,-0.708914,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.523438,0.750000,
0.136642,-0.769704,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.531250,0.750000,
0.111218,-0.769704,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.531250,1.000000,
0.960867,-1.316812,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.601562,0.750000,
1.104267,-1.361315,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.609375,0.750000,
1.078844,-1.361315,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.609375,1.000000,
1.104267,-1.361315,0.008022,0.2964,0.9551,-0.0000,.5,.5,.5,0.609375,0.500000,
1.104267,-1.361315,-0.991144,0.2964,0.9551,-0.0000,.5,.5,.5,0.609375,0.750000,
0.960867,-1.316812,-0.991144,0.2964,0.9551,-0.0000,.5,.5,.5,0.601562,0.750000,
1.078844,-1.361315,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.609375,0.250000,
1.104267,-1.361315,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.609375,0.500000,
0.960867,-1.316812,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.601562,0.500000,
1.078844,-1.361315,-0.991144,-0.2964,-0.9551,0.0000,.5,.5,.5,0.609375,0.000000,
1.078844,-1.361315,0.008022,-0.2964,-0.9551,0.0000,.5,.5,.5,0.609375,0.250000,
0.935444,-1.316812,0.008022,-0.2964,-0.9551,0.0000,.5,.5,.5,0.601562,0.250000,
0.547134,-1.134442,-0.991144,-0.5445,-0.8387,0.0000,.5,.5,.5,0.578125,0.000000,
0.547134,-1.134442,0.008022,-0.5445,-0.8387,0.0000,.5,.5,.5,0.578125,0.250000,
0.453499,-1.073653,0.008022,-0.5445,-0.8387,0.0000,.5,.5,.5,0.570312,0.250000,
0.547134,-1.134442,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.578125,0.250000,
0.572557,-1.134442,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.578125,0.500000,
0.478922,-1.073653,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.570312,0.500000,
0.572557,-1.134442,0.008022,0.5445,0.8387,0.0000,.5,.5,.5,0.578125,0.500000,
0.572557,-1.134442,-0.991144,0.5445,0.8387,0.0000,.5,.5,.5,0.578125,0.750000,
0.478922,-1.073653,-0.991144,0.5445,0.8387,0.0000,.5,.5,.5,0.570312,0.750000,
0.478922,-1.073653,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.570312,0.750000,
0.572557,-1.134442,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.578125,0.750000,
0.547134,-1.134442,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.578125,1.000000,
0.239890,-0.891284,-0.991144,-0.6678,-0.7443,0.0000,.5,.5,.5,0.546875,0.000000,
0.239890,-0.891283,0.008022,-0.6678,-0.7443,0.0000,.5,.5,.5,0.546875,0.250000,
0.172142,-0.830494,0.008022,-0.6678,-0.7443,0.0000,.5,.5,.5,0.539062,0.250000,
0.239890,-0.891283,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.546875,0.250000,
0.265314,-0.891283,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.546875,0.500000,
0.197566,-0.830494,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.539062,0.500000,
0.265314,-0.891283,0.008022,0.6678,0.7443,-0.0000,.5,.5,.5,0.546875,0.500000,
0.265314,-0.891284,-0.991144,0.6678,0.7443,-0.0000,.5,.5,.5,0.546875,0.750000,
0.197566,-0.830494,-0.991144,0.6678,0.7443,-0.0000,.5,.5,.5,0.539062,0.750000,
0.197566,-0.830494,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.539062,0.750000,
0.265314,-0.891284,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.546875,0.750000,
0.239890,-0.891284,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.546875,1.000000,
0.006451,-0.587335,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.507812,0.750000,
0.033029,-0.648124,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.515625,0.750000,
0.007605,-0.648124,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.515625,1.000000,
0.033029,-0.648124,0.008022,0.9163,0.4006,0.0000,.5,.5,.5,0.515625,0.500000,
0.033029,-0.648124,-0.991144,0.9163,0.4006,0.0000,.5,.5,.5,0.515625,0.750000,
0.006451,-0.587335,-0.991144,0.9163,0.4006,0.0000,.5,.5,.5,0.507812,0.750000,
0.007605,-0.648124,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.515625,0.250000,
0.033029,-0.648124,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.515625,0.500000,
0.006451,-0.587335,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.507812,0.500000,
0.007605,-0.648124,-0.991144,-0.9163,-0.4006,0.0000,.5,.5,.5,0.515625,0.000000,
0.007605,-0.648124,0.008022,-0.9163,-0.4006,0.0000,.5,.5,.5,0.515625,0.250000,
-0.018973,-0.587335,0.008022,-0.9163,-0.4006,0.0000,.5,.5,.5,0.507812,0.250000,
-0.018973,-0.587335,-0.991144,-0.9435,-0.3315,0.0000,.5,.5,.5,0.507812,0.000000,
-0.018973,-0.587335,0.008022,-0.9435,-0.3315,0.0000,.5,.5,.5,0.507812,0.250000,
-0.040330,-0.526545,0.008022,-0.9435,-0.3315,0.0000,.5,.5,.5,0.500000,0.250000,
-0.018973,-0.587335,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.507812,0.250000,
0.006451,-0.587335,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.507812,0.500000,
-0.014906,-0.526545,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.500000,0.500000,
0.006451,-0.587335,0.008022,0.9435,0.3315,0.0000,.5,.5,.5,0.507812,0.500000,
0.006451,-0.587335,-0.991144,0.9435,0.3315,0.0000,.5,.5,.5,0.507812,0.750000,
-0.014906,-0.526545,-0.991144,0.9435,0.3315,0.0000,.5,.5,.5,0.500000,0.750000,
-0.014906,-0.526545,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.500000,0.750000,
0.006451,-0.587335,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.507812,0.750000,
-0.018973,-0.587335,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.507812,1.000000,
0.033029,-0.648124,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.515625,0.750000,
0.082288,-0.708914,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.523438,0.750000,
0.056864,-0.708914,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.523438,1.000000,
0.082288,-0.708914,0.008022,0.7769,0.6296,-0.0000,.5,.5,.5,0.523438,0.500000,
0.082288,-0.708914,-0.991144,0.7769,0.6296,-0.0000,.5,.5,.5,0.523438,0.750000,
0.033029,-0.648124,-0.991144,0.7769,0.6296,-0.0000,.5,.5,.5,0.515625,0.750000,
0.056864,-0.708914,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.523438,0.250000,
0.082288,-0.708914,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.523438,0.500000,
0.033029,-0.648124,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.515625,0.500000,
0.056864,-0.708914,-0.991144,-0.7769,-0.6296,0.0000,.5,.5,.5,0.523438,0.000000,
0.056864,-0.708914,0.008022,-0.7769,-0.6296,0.0000,.5,.5,.5,0.523438,0.250000,
0.007605,-0.648124,0.008022,-0.7769,-0.6296,0.0000,.5,.5,.5,0.515625,0.250000,
0.136642,-0.769704,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.531250,0.750000,
0.197566,-0.830494,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.539062,0.750000,
0.172142,-0.830494,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.539062,1.000000,
0.197566,-0.830494,0.008022,0.7063,0.7079,0.0000,.5,.5,.5,0.539062,0.500000,
0.197566,-0.830494,-0.991144,0.7063,0.7079,0.0000,.5,.5,.5,0.539062,0.750000,
0.136642,-0.769704,-0.991144,0.7063,0.7079,0.0000,.5,.5,.5,0.531250,0.750000,
0.172142,-0.830494,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.539062,0.250000,
0.197566,-0.830494,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.539062,0.500000,
0.136642,-0.769704,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.531250,0.500000,
0.172142,-0.830494,-0.991144,-0.7063,-0.7079,0.0000,.5,.5,.5,0.539062,0.000000,
0.172142,-0.830494,0.008022,-0.7063,-0.7079,0.0000,.5,.5,.5,0.539062,0.250000,
0.111218,-0.769704,0.008022,-0.7063,-0.7079,0.0000,.5,.5,.5,0.531250,0.250000,
0.303374,-0.952073,-0.991144,-0.6916,-0.7223,0.0000,.5,.5,.5,0.554688,0.000000,
0.303374,-0.952073,0.008022,-0.6916,-0.7223,0.0000,.5,.5,.5,0.554688,0.250000,
0.239890,-0.891283,0.008022,-0.6916,-0.7223,0.0000,.5,.5,.5,0.546875,0.250000,
0.303374,-0.952073,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.554688,0.250000,
0.328797,-0.952073,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.554688,0.500000,
0.265314,-0.891283,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.546875,0.500000,
0.328797,-0.952073,0.008022,0.6916,0.7223,0.0000,.5,.5,.5,0.554688,0.500000,
0.328797,-0.952073,-0.991144,0.6916,0.7223,0.0000,.5,.5,.5,0.554688,0.750000,
0.265314,-0.891284,-0.991144,0.6916,0.7223,0.0000,.5,.5,.5,0.546875,0.750000,
0.265314,-0.891284,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.546875,0.750000,
0.328797,-0.952073,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.554688,0.750000,
0.303374,-0.952073,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.554688,1.000000,
0.395897,-1.012863,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.562500,0.750000,
0.478922,-1.073653,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.570312,0.750000,
0.453499,-1.073653,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.570312,1.000000,
0.478922,-1.073653,0.008022,0.5908,0.8068,-0.0000,.5,.5,.5,0.570312,0.500000,
0.478922,-1.073653,-0.991144,0.5908,0.8068,-0.0000,.5,.5,.5,0.570312,0.750000,
0.395897,-1.012863,-0.991144,0.5908,0.8068,-0.0000,.5,.5,.5,0.562500,0.750000,
0.453499,-1.073653,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.570312,0.250000,
0.478922,-1.073653,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.570312,0.500000,
0.395897,-1.012863,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.562500,0.500000,
0.453499,-1.073653,-0.991144,-0.5908,-0.8068,0.0000,.5,.5,.5,0.570312,0.000000,
0.453499,-1.073653,0.008022,-0.5908,-0.8068,0.0000,.5,.5,.5,0.570312,0.250000,
0.370474,-1.012863,0.008022,-0.5908,-0.8068,0.0000,.5,.5,.5,0.562500,0.250000,
0.653069,-1.195232,-0.991144,-0.4977,-0.8673,0.0000,.5,.5,.5,0.585938,0.000000,
0.653069,-1.195232,0.008022,-0.4977,-0.8673,0.0000,.5,.5,.5,0.585938,0.250000,
0.547134,-1.134442,0.008022,-0.4977,-0.8673,0.0000,.5,.5,.5,0.578125,0.250000,
0.653069,-1.195232,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.585938,0.250000,
0.678493,-1.195232,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.585938,0.500000,
0.572557,-1.134442,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.578125,0.500000,
0.678493,-1.195232,0.008022,0.4977,0.8673,0.0000,.5,.5,.5,0.585938,0.500000,
0.678493,-1.195232,-0.991144,0.4977,0.8673,0.0000,.5,.5,.5,0.585938,0.750000,
0.572557,-1.134442,-0.991144,0.4977,0.8673,0.0000,.5,.5,.5,0.578125,0.750000,
0.572557,-1.134442,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.578125,0.750000,
0.678493,-1.195232,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.585938,0.750000,
0.653069,-1.195232,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.585938,1.000000,
0.935444,-1.316812,-0.991144,-0.3694,-0.9293,0.0000,.5,.5,.5,0.601562,0.000000,
0.935444,-1.316812,0.008022,-0.3694,-0.9293,0.0000,.5,.5,.5,0.601562,0.250000,
0.782508,-1.256022,0.008022,-0.3694,-0.9293,0.0000,.5,.5,.5,0.593750,0.250000,
0.935444,-1.316812,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.601562,0.250000,
0.960867,-1.316812,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.601562,0.500000,
0.807931,-1.256022,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.593750,0.500000,
0.960867,-1.316812,0.008022,0.3694,0.9293,0.0000,.5,.5,.5,0.601562,0.500000,
0.960867,-1.316812,-0.991144,0.3694,0.9293,0.0000,.5,.5,.5,0.601562,0.750000,
0.807931,-1.256022,-0.991144,0.3694,0.9293,0.0000,.5,.5,.5,0.593750,0.750000,
0.807931,-1.256022,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.593750,0.750000,
0.960867,-1.316812,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.601562,0.750000,
0.935444,-1.316812,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.601562,1.000000,
1.104267,-1.361315,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.609375,0.750000,
1.296494,-1.391447,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.617188,0.750000,
1.271071,-1.391447,-0.991144,0.0000,0.0000,-1.0000,.5,.5,.5,0.617188,1.000000,
1.296494,-1.391447,0.008022,0.1549,0.9879,0.0000,.5,.5,.5,0.617188,0.500000,
1.296494,-1.391447,-0.991144,0.1549,0.9879,0.0000,.5,.5,.5,0.617188,0.750000,
1.104267,-1.361315,-0.991144,0.1549,0.9879,0.0000,.5,.5,.5,0.609375,0.750000,
1.271071,-1.391447,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.617188,0.250000,
1.296494,-1.391447,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.617188,0.500000,
1.104267,-1.361315,0.008022,0.0000,0.0000,1.0000,.5,.5,.5,0.609375,0.500000,
1.271071,-1.391447,-0.991144,-0.1549,-0.9879,0.0000,.5,.5,.5,0.617188,0.000000,
1.271071,-1.391447,0.008022,-0.1549,-0.9879,0.0000,.5,.5,.5,0.617188,0.250000,
1.078844,-1.361315,0.008022,-0.1549,-0.9879,0.0000,.5,.5,.5,0.609375,0.250000,
   ]

   var peekCard = gl.createBuffer();
   gl.bindBuffer(gl.ARRAY_BUFFER,peekCard);
   gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(peek_card_data),gl.STATIC_DRAW);


   //  Set state to draw scene
   gl.enable(gl.DEPTH_TEST);
   gl.clearColor(0,0,0,1);
   //  Mouse control variables
   var x0 = y0 = move  = 0;
   //  Rotation angles
   var th = ph = 0;

   
   // Create and load textures
   var textures = []
   var texturesDict = {}
   for(let i_img=0;i_img<images.length;i_img++){
        var tex = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D,tex);
        gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,gl.RGB,gl.UNSIGNED_BYTE,images[i_img]);
        gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
        textures.push(tex)
        texturesDict[images[i_img].id] = {tex: tex}
   }
   
   // animation vars
   var then = 0;
   var zh = 0;
   var LightPosition = [3.5*Math.cos(zh),2,3.5*Math.sin(zh),1.0];
   // single set vars
   
   // set animation state to steps
   var previousAnimationState = 0
   var animationState = 0 // 0=rest , 1=deal , 2=flopping, 3=fflop, 4=turning, 5=fturn, 6=rivering, 7=friver
   var nextAnimationState = 0
   var animations = {
      deal: getNewAnimationData('deal',1,0),
      flop: getNewAnimationData('flop',2,3),
      flipping_flop: getNewAnimationData('flipping_flop',3,0),
      turn: getNewAnimationData('turn',4,5),
      flipping_turn: getNewAnimationData('flipping_turn',5,0),
      river: getNewAnimationData('river',6,7),
      flipping_river: getNewAnimationData('flipping_river',7,0)
   }

   var globalPlayersNumber = 9
   var playingAs = 2

   // x shift vars
   var xs_flop = {a:-.6,b:-.3,c:0}
   var xs_turn = .6
   var xs_river = .9
   
   //  Draw scene the first time
   requestAnimationFrame(Display);
   //
   //  Display the scene
   //
   function Display(now)
   {
      // Set shader
      gl.useProgram(prog);

      // enable animation
      now *= 0.001;
      var deltaTime = now - then;
      then = now;
      zh += 1.2 * deltaTime;
      // pass light position
      LightPosition = [3.5*Math.cos(zh),2,3.5*Math.sin(zh),1.0];
      gl.uniform4fv(gl.getUniformLocation(prog,"Position") , LightPosition);
      //  Clear the screen and Z buffer
      gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);
      //  Eye position for perspective
      var Ex = -2*dim*Math.sin(th)*Math.cos(ph);
      var Ey = +2*dim             *Math.sin(ph);
      var Ez = +2*dim*Math.cos(th)*Math.cos(ph);
      // Compute view and modelview matrix
      // set look at
      var ViewMatrix = new mat4();
      if(uiObject.checkFlopToggle){
         ViewMatrix.lookAt(.3,1.5,0 , .3,0,0, 0,0,-1);
      }else if(uiObject.peekCardsToggle){
         var posObj = getPlayersEyes(globalPlayersNumber,playingAs)
         ViewMatrix.lookAt(posObj.x,.25,posObj.z , 0,.25,0, 0,1,0);
         // ViewMatrix.lookAt(Ex,Ey,Ez , 0,0,0, 0,Math.cos(ph),0);
      }else{
         ViewMatrix.lookAt(Ex,Ey,Ez , 0,0,0, 0,Math.cos(ph),0);
      }

      var ModelviewMatrix = new mat4(ViewMatrix);
      
      //  Set projection and modelview matrixes
      gl.uniformMatrix4fv(gl.getUniformLocation(prog,"ProjectionMatrix") , false , ProjectionMatrix.getMat());
      gl.uniformMatrix4fv(gl.getUniformLocation(prog,"ViewMatrix")  , false , ViewMatrix.getMat());

      previousAnimationState = animationState

      if(uiObject.stepFuse){
         animationState = uiObject.stepClicks
         uiObject.stepFuse = false
         if(uiObject.stepClicks === -1){
            resetAnimationData(animations)
         }
      }else{
         animationState = nextAnimationState
      }

      // draw static objects
      drawTable(ModelviewMatrix,textures[0]);
      drawDeck(0,0,.5,ModelviewMatrix,textures[1]);

      // if animation is complete draw static objects
      if(animations['deal'].finished){
         var posArray = getPlayersPos(globalPlayersNumber);
         posArray.forEach((pos,posIndex) => {
             // player x
             if(posIndex === playingAs && uiObject.peekCardsToggle){
                drawPeakingCard(false,pos.x1,pos.z1,0,pos.delta1,ModelviewMatrix,textures)
                // drawPeakingCard(false,pos.x2,pos.z2,.001,pos.delta2,ModelviewMatrix,textures)
             }else{
                drawCard(false,pos.x1,pos.z1,0,pos.delta1,ModelviewMatrix,textures,texturesDict,'c','14')
                drawCard(false,pos.x2,pos.z2,.001,pos.delta2,ModelviewMatrix,textures,texturesDict,'c','14')
             }
          })
      }
      if(animations['flipping_flop'].finished){
         drawFlop(xs_flop,ModelviewMatrix,textures,texturesDict,'c','13')
      }
      if(animations['flipping_turn'].finished){
         drawCard(true,xs_turn,0,0,0,ModelviewMatrix,textures,texturesDict,'c','14')
      }
      if(animations['flipping_river'].finished){
         drawCard(true,xs_river,0,0,0,ModelviewMatrix,textures,texturesDict,'c','14')
      }

      // trigger animation if new state
      if(animationState !== previousAnimationState){
         var animationToStart = _find(animations, (animationObject)=>{
            return animationObject.animationState === animationState
         })
         if(animationToStart){
            triggerAnimationStart(animationToStart, now)
         }
      }

      // check running animations to see if we should stop them
      _each(animations, (animationObject)=>{
         if(animationObject.running){
            if(animationComplete(animationObject, now)){
               triggerAnimationStop(animationObject)
               if(animationObject.nextAnimationState !== undefined){
                  nextAnimationState = animationObject.nextAnimationState
               }
           }
         }
      })

      // draw animations that are running
      if(animations['deal'].running){
         dealAnimation(globalPlayersNumber,ModelviewMatrix,textures,now-animations['deal'].startTime);
      }
      if(animations['flop'].running){
         flopAnimation(xs_flop,ModelviewMatrix,textures,now-animations['flop'].startTime);
      }
      if(animations['flipping_flop'].running){
         drawFlippingCard(true,xs_flop.a+.3,0,0,0,ModelviewMatrix,textures,now-animations['flipping_flop'].startTime,true)
         drawFlippingCard(true,xs_flop.b+.3,0,0,0,ModelviewMatrix,textures,now-animations['flipping_flop'].startTime,true)
         drawFlippingCard(true,xs_flop.c+.3,0,0,0,ModelviewMatrix,textures,now-animations['flipping_flop'].startTime,true)
      }
      if(animations['turn'].running){
         drawMovingCard(false,false,0,0,-.6,-.3,xs_turn,-.3,ModelviewMatrix,textures[1],now-animations['turn'].startTime)
      }
      if(animations['flipping_turn'].running){
         drawFlippingCard(true,xs_turn,-.3,0,0,ModelviewMatrix,textures,now-animations['flipping_turn'].startTime,false)
      }
      if(animations['river'].running){
         drawMovingCard(false,false,0,0,-.6,-.3,xs_river,-.3,ModelviewMatrix,textures[1],now-animations['river'].startTime)
      }
      if(animations['flipping_river'].running){
         drawFlippingCard(true,xs_river,-.3,0,0,ModelviewMatrix,textures,now-animations['flipping_river'].startTime,false)
      }

      //  request next frame
      requestAnimationFrame(Display);
   }

   function drawDeck(positionNumber,x,z,ModelviewMatrix,tex){
    
    gl.bindTexture(gl.TEXTURE_2D,tex)
    //  Bind cube buffer
    gl.bindBuffer(gl.ARRAY_BUFFER,cube);
    //  Set up 3D vertex array
    var XYZ = gl.getAttribLocation(prog,"XYZ");
    gl.enableVertexAttribArray(XYZ);
    gl.vertexAttribPointer(XYZ,3,gl.FLOAT,false,44,0);
    // Set up 3D normal array
    var NORM = gl.getAttribLocation(prog,"NORM");
    gl.enableVertexAttribArray(NORM);
    gl.vertexAttribPointer(NORM,3,gl.FLOAT,false,44,12);
    //  Set up 3D color array
    var RGB = gl.getAttribLocation(prog,"RGB");
    gl.enableVertexAttribArray(RGB);
    gl.vertexAttribPointer(RGB,3,gl.FLOAT,false,44,24);
    //  Set up 2D texture array
    var T2D = gl.getAttribLocation(prog,"T2D");
    gl.enableVertexAttribArray(T2D);
    gl.vertexAttribPointer(T2D,2,gl.FLOAT,false,44,36);

    //  table
    var cube1MVM = new mat4(ModelviewMatrix);
    cube1MVM.translate(x,.05,z);
    cube1MVM.rotate(20,0,1,0);
    cube1MVM.scale(.1,.05,.15);
    gl.uniformMatrix4fv(gl.getUniformLocation(prog,"ModelviewMatrix")  , false , cube1MVM.getMat());
    gl.uniformMatrix3fv(gl.getUniformLocation(prog,"NormalMatrix")  , false , cube1MVM.normalMatrix());
    gl.drawArrays(gl.TRIANGLES,0,n);

    //  Disable vertex arrays
    gl.disableVertexAttribArray(XYZ);
    gl.disableVertexAttribArray(NORM);
    gl.disableVertexAttribArray(RGB);
    gl.disableVertexAttribArray(T2D);
}

function getCardTexture(faceUp, suite, cardNumber, texturesDict){
   if(!faceUp){
      var texObject = texturesDict[imagesFolder+'double_card_back.png']
      return texObject ? texObject.tex : {}
   }

   var texObject = texturesDict[imagesFolder+'card_'+suite+cardNumber+'.png']
   return texObject ? texObject.tex : {}
}

function drawFlippingCard(faceUp,x,z,ySit,rotation,ModelviewMatrix,textures,now,horizontal){
   var posObj = horizontal ? flipCardHorizontalPosition(x,ySit,z,now) : flipCardVerticalPosition(x,ySit,z,now)
   gl.bindTexture(gl.TEXTURE_2D,faceUp?textures[15]:textures[2])
   //  Bind cube buffer
   gl.bindBuffer(gl.ARRAY_BUFFER,card);
   //  Set up 3D vertex array
   var XYZ = gl.getAttribLocation(prog,"XYZ");
   gl.enableVertexAttribArray(XYZ);
   gl.vertexAttribPointer(XYZ,3,gl.FLOAT,false,44,0);
   // Set up 3D normal array
   var NORM = gl.getAttribLocation(prog,"NORM");
   gl.enableVertexAttribArray(NORM);
   gl.vertexAttribPointer(NORM,3,gl.FLOAT,false,44,12);
   //  Set up 3D color array
   var RGB = gl.getAttribLocation(prog,"RGB");
   gl.enableVertexAttribArray(RGB);
   gl.vertexAttribPointer(RGB,3,gl.FLOAT,false,44,24);
   //  Set up 2D texture array
   var T2D = gl.getAttribLocation(prog,"T2D");
   gl.enableVertexAttribArray(T2D);
   gl.vertexAttribPointer(T2D,2,gl.FLOAT,false,44,36);

   //  table
   var cube1MVM = new mat4(ModelviewMatrix);
   cube1MVM.translate(posObj.x,.001+posObj.y,posObj.z);
   horizontal ? cube1MVM.rotate(posObj.delta,0,0,1) : cube1MVM.rotate(posObj.delta,1,0,0)
   cube1MVM.scale(.1,.001,.15);
   gl.uniformMatrix4fv(gl.getUniformLocation(prog,"ModelviewMatrix")  , false , cube1MVM.getMat());
   gl.uniformMatrix3fv(gl.getUniformLocation(prog,"NormalMatrix")  , false , cube1MVM.normalMatrix());
   gl.drawArrays(gl.TRIANGLES,0,n);

   //  Disable vertex arrays
   gl.disableVertexAttribArray(XYZ);
   gl.disableVertexAttribArray(NORM);
   gl.disableVertexAttribArray(RGB);
   gl.disableVertexAttribArray(T2D);
}
   
function drawMovingCard(faceUp,spinning,endYAngle,ySit,x1,z1,x2,z2,ModelviewMatrix,tex,time){
    gl.bindTexture(gl.TEXTURE_2D,tex)
    //  Bind cube buffer
    gl.bindBuffer(gl.ARRAY_BUFFER,cube);
    //  Set up 3D vertex array
    var XYZ = gl.getAttribLocation(prog,"XYZ");
    gl.enableVertexAttribArray(XYZ);
    gl.vertexAttribPointer(XYZ,3,gl.FLOAT,false,44,0);
    // Set up 3D normal array
    var NORM = gl.getAttribLocation(prog,"NORM");
    gl.enableVertexAttribArray(NORM);
    gl.vertexAttribPointer(NORM,3,gl.FLOAT,false,44,12);
    //  Set up 3D color array
    var RGB = gl.getAttribLocation(prog,"RGB");
    gl.enableVertexAttribArray(RGB);
    gl.vertexAttribPointer(RGB,3,gl.FLOAT,false,44,24);
    //  Set up 2D texture array
    var T2D = gl.getAttribLocation(prog,"T2D");
    gl.enableVertexAttribArray(T2D);
    gl.vertexAttribPointer(T2D,2,gl.FLOAT,false,44,36);

    //  table
    var cube1MVM = new mat4(ModelviewMatrix);
    var posObject = straitLine(time,x1,z1,x2,z2);

    cube1MVM.translate(posObject.x,.001+ySit,posObject.z);
    cube1MVM.rotate(spinning?rotation(time,endYAngle):0,0,1,0);
    cube1MVM.scale(.1,.001,.15);
    gl.uniformMatrix4fv(gl.getUniformLocation(prog,"ModelviewMatrix")  , false , cube1MVM.getMat());
    gl.uniformMatrix3fv(gl.getUniformLocation(prog,"NormalMatrix")  , false , cube1MVM.normalMatrix());
    gl.drawArrays(gl.TRIANGLES,0,n);

    //  Disable vertex arrays
    gl.disableVertexAttribArray(XYZ);
    gl.disableVertexAttribArray(NORM);
    gl.disableVertexAttribArray(RGB);
    gl.disableVertexAttribArray(T2D);
} 

   function drawCard(faceUp,x,z,ySit,rotation,ModelviewMatrix, textures, texturesDict, suite, cardNumber){
    
    gl.bindTexture(gl.TEXTURE_2D,getCardTexture(faceUp,suite,cardNumber,texturesDict))
    //  Bind cube buffer
    gl.bindBuffer(gl.ARRAY_BUFFER,card);
    //  Set up 3D vertex array
    var XYZ = gl.getAttribLocation(prog,"XYZ");
    gl.enableVertexAttribArray(XYZ);
    gl.vertexAttribPointer(XYZ,3,gl.FLOAT,false,44,0);
    // Set up 3D normal array
    var NORM = gl.getAttribLocation(prog,"NORM");
    gl.enableVertexAttribArray(NORM);
    gl.vertexAttribPointer(NORM,3,gl.FLOAT,false,44,12);
    //  Set up 3D color array
    var RGB = gl.getAttribLocation(prog,"RGB");
    gl.enableVertexAttribArray(RGB);
    gl.vertexAttribPointer(RGB,3,gl.FLOAT,false,44,24);
    //  Set up 2D texture array
    var T2D = gl.getAttribLocation(prog,"T2D");
    gl.enableVertexAttribArray(T2D);
    gl.vertexAttribPointer(T2D,2,gl.FLOAT,false,44,36);

    //  table
    var cube1MVM = new mat4(ModelviewMatrix);
    cube1MVM.translate(x,.001+ySit,z);
    cube1MVM.rotate(rotation,0,1,0);
    cube1MVM.scale(.1,.001,.15);
    gl.uniformMatrix4fv(gl.getUniformLocation(prog,"ModelviewMatrix")  , false , cube1MVM.getMat());
    gl.uniformMatrix3fv(gl.getUniformLocation(prog,"NormalMatrix")  , false , cube1MVM.normalMatrix());
    gl.drawArrays(gl.TRIANGLES,0,n);

    //  Disable vertex arrays
    gl.disableVertexAttribArray(XYZ);
    gl.disableVertexAttribArray(NORM);
    gl.disableVertexAttribArray(RGB);
    gl.disableVertexAttribArray(T2D);
}

function drawPeakingCard(faceUp,x,z,ySit,rotation,ModelviewMatrix,textures){
    
   gl.bindTexture(gl.TEXTURE_2D,faceUp?textures[3]:textures[2])
   //  Bind cube buffer
   gl.bindBuffer(gl.ARRAY_BUFFER,peekCard);
   //  Set up 3D vertex array
   var XYZ = gl.getAttribLocation(prog,"XYZ");
   gl.enableVertexAttribArray(XYZ);
   gl.vertexAttribPointer(XYZ,3,gl.FLOAT,false,44,0); // set 
   // Set up 3D normal array
   var NORM = gl.getAttribLocation(prog,"NORM");
   gl.enableVertexAttribArray(NORM);
   gl.vertexAttribPointer(NORM,3,gl.FLOAT,false,44,12); // set
   //  Set up 3D color array
   var RGB = gl.getAttribLocation(prog,"RGB");
   gl.enableVertexAttribArray(RGB);
   gl.vertexAttribPointer(RGB,3,gl.FLOAT,false,44,24); // set
   //  Set up 2D texture array
   var T2D = gl.getAttribLocation(prog,"T2D");
   gl.enableVertexAttribArray(T2D);
   gl.vertexAttribPointer(T2D,2,gl.FLOAT,false,44,36); // set

   //  table
   var cube1MVM = new mat4(ModelviewMatrix);
   cube1MVM.translate(x,.001+ySit+.45-.4,z); // cube1MVM.translate(x,.001+ySit,z);
   cube1MVM.rotate(90,0,0,1);
   cube1MVM.rotate(-90,1,0,0);
   cube1MVM.scale(.3,.3,.3); // .1,.001,.15 // may need to swap y and x
   gl.uniformMatrix4fv(gl.getUniformLocation(prog,"ModelviewMatrix")  , false , cube1MVM.getMat());
   gl.uniformMatrix3fv(gl.getUniformLocation(prog,"NormalMatrix")  , false , cube1MVM.normalMatrix());
   gl.drawArrays(gl.TRIANGLES,0,n_peekCard); // set n

   //  Disable vertex arrays
   gl.disableVertexAttribArray(XYZ);
   gl.disableVertexAttribArray(NORM);
   gl.disableVertexAttribArray(RGB);
   gl.disableVertexAttribArray(T2D);
}

   function drawTable(ModelviewMatrix,tex){
    
        gl.bindTexture(gl.TEXTURE_2D,tex)
        //  Bind cube buffer
        gl.bindBuffer(gl.ARRAY_BUFFER,cube);
        //  Set up 3D vertex array
        var XYZ = gl.getAttribLocation(prog,"XYZ");
        gl.enableVertexAttribArray(XYZ);
        gl.vertexAttribPointer(XYZ,3,gl.FLOAT,false,44,0);
        // Set up 3D normal array
        var NORM = gl.getAttribLocation(prog,"NORM");
        gl.enableVertexAttribArray(NORM);
        gl.vertexAttribPointer(NORM,3,gl.FLOAT,false,44,12);
        //  Set up 3D color array
        var RGB = gl.getAttribLocation(prog,"RGB");
        gl.enableVertexAttribArray(RGB);
        gl.vertexAttribPointer(RGB,3,gl.FLOAT,false,44,24);
        //  Set up 2D texture array
        var T2D = gl.getAttribLocation(prog,"T2D");
        gl.enableVertexAttribArray(T2D);
        gl.vertexAttribPointer(T2D,2,gl.FLOAT,false,44,36);

        //  table
        var cube1MVM = new mat4(ModelviewMatrix);
        cube1MVM.translate(0,-.05,0);
        cube1MVM.scale(3,.05,3);
        gl.uniformMatrix4fv(gl.getUniformLocation(prog,"ModelviewMatrix")  , false , cube1MVM.getMat());
        gl.uniformMatrix3fv(gl.getUniformLocation(prog,"NormalMatrix")  , false , cube1MVM.normalMatrix());
        gl.drawArrays(gl.TRIANGLES,0,n);

        //  Disable vertex arrays
        gl.disableVertexAttribArray(XYZ);
        gl.disableVertexAttribArray(NORM);
        gl.disableVertexAttribArray(RGB);
        gl.disableVertexAttribArray(T2D);
   }

   function flipCardHorizontalPosition(cardX,cardY,cardZ,now){
      var ret = {}

      var flipR = .15
      var centerX = cardX - flipR
      var centerY = cardY
      var angle = 180 - ((now*180) % 180)
      ret.x = Math.cos(angle*(Math.PI/180))*flipR + centerX
      ret.y = Math.sin(angle*(Math.PI/180))*flipR + centerY
      ret.z = cardZ
      ret.delta = (((now*180) % 180)*-1)+180
      return ret
   }

   function flipCardVerticalPosition(cardX,cardY,cardZ,now){
      var ret = {}

      var flipR = .15
      var centerZ = cardZ + flipR
      var centerY = cardY
      var angle = 180 - ((now*180) % 180)
      ret.z = Math.cos(angle*(Math.PI/180))*flipR + centerZ
      ret.y = Math.sin(angle*(Math.PI/180))*flipR + centerY
      ret.x = cardX
      ret.delta = ((now*180) % 180)+180
      return ret
   }

   function getNewAnimationData(name, animationState, nextAnimationState){
      return {
         name: name,
         running: false,
         finished: false,
         startTime: -1,
         animationState: animationState,
         nextAnimationState: nextAnimationState,
      }
   }

   function triggerAnimationStart(animationData, now){
      if(!animationData.running && !animationData.finished){
         animationData.startTime = now
         animationData.running = true
      }
   }

   function animationComplete(animationData, now){
      if(animationData.running && !animationData.finished){
         return now-animationData.startTime >= 1
      }
      return false
   }

   function triggerAnimationStop(animationData){
      animationData.running = false
      animationData.finished = true
   }

   function resetAnimationData(animations){
      _each(animations, (animationData)=>{
         animationData.running = false
         animationData.finished = false
         animationData.startTime = -1
      })
   }

   function dealAnimation(players,ModelviewMatrix,textures,now){
      var posArray = getPlayersPos(players)
      posArray.forEach(pos => {
         // player x
         drawMovingCard(false,true,pos.delta1,0,0,0,pos.x1,pos.z1,ModelviewMatrix,textures[1],now)
         drawMovingCard(false,true,pos.delta2,0,0,0,pos.x2,pos.z2,ModelviewMatrix,textures[1],now)
      })
   }

   function flopAnimation(xs,ModelviewMatrix,textures,now){
      drawMovingCard(false,false,0,0,-.9,0,xs.a,0,ModelviewMatrix,textures[1],now)
      drawMovingCard(false,false,0,0,-.9,0,xs.b,0,ModelviewMatrix,textures[1],now)
      drawMovingCard(false,false,0,0,-.9,0,xs.c,0,ModelviewMatrix,textures[1],now)
   }

   function drawFlop(xs,ModelviewMatrix,textures,texturesDict,suite,cardNumber){
      drawCard(true,xs.a+.3,0,0,0,ModelviewMatrix,textures,texturesDict,suite,cardNumber)
      drawCard(true,xs.b+.3,0,0,0,ModelviewMatrix,textures,texturesDict,suite,cardNumber)
      drawCard(true,xs.c+.3,0,0,0,ModelviewMatrix,textures,texturesDict,suite,cardNumber)         
   }

   function getPlayersPos(numPlayers){
      var tableCenterX = 0 
      var tableCenterZ = 0 
      var r = 2.5

      var pos = []
      var deltaAngle = 360/numPlayers
      var angle = 0
      var halfAngleSpread = 1

      for(let i=0;i<numPlayers;i++){
         var newPos = {}
         // card1
         var angle1 = angle - halfAngleSpread
         newPos.x1 = Math.cos(angle1*(Math.PI/180))*r + tableCenterX
         newPos.z1 = Math.sin(angle1*(Math.PI/180))*r + tableCenterZ
         newPos.delta1 = 90-angle1
         // card 2
         var angle2 = angle + halfAngleSpread
         newPos.x2 = Math.cos(angle2*(Math.PI/180))*r + tableCenterX
         newPos.z2 = Math.sin(angle2*(Math.PI/180))*r + tableCenterZ
         newPos.delta2 = 90-angle2
         // next angle
         angle += deltaAngle

         pos.push(newPos)
      }
      return pos
   }

   function getPlayersEyes(numPlayers,playerNumber){
      var tableCenterX = 0 
      var tableCenterZ = 0
      var eyesBack = .95 
      var r = 2.5 + eyesBack

      var deltaAngle = 360/numPlayers
      var angle = 0 + (playerNumber*deltaAngle)
      var pos = {}
      
      pos.x = Math.cos(angle*(Math.PI/180))*r + tableCenterX
      pos.z = Math.sin(angle*(Math.PI/180))*r + tableCenterZ
      return pos
   }

   function rotation(currentTime, endAngle){
    // var endAngle = 20
    var currentEnd = 280
    var offSet = endAngle - currentEnd
    return (currentTime*1000%360) + offSet; //0-1
   }

   function straitLine(currentTime,xStart,zStart,xEnd,zEnd){
       var localTime = (currentTime*1000%1000)/1000; //0-1
       var currentX = xStart + (xEnd-xStart)*localTime
       var currentZ = zStart + (zEnd-zStart)*localTime
       return {x:currentX,z:currentZ}
      
   }

   function _each(objectX, callback){
      var objKeys = Object.keys(objectX)
      for(var io=0;io<objKeys.length;io++){
         callback(objectX[objKeys[io]])
      }
   }

   function _find(objectX, callback){
      var objKeys = Object.keys(objectX)
      for(var io=0;io<objKeys.length;io++){
         cbReturn = callback(objectX[objKeys[io]])
         if(cbReturn){
            return objectX[objKeys[io]]
         }
      }
      return undefined
   }

   //
   //  Resize canvas
   //
   canvas.resize = function ()
   {
      var size = Math.min(window.innerWidth, window.innerHeight)-10;
      canvas.width  = canvas.width  = window.innerWidth - 210;
      canvas.height = canvas.height = window.innerHeight - 10;
      var xStart =  (canvas.width - 2*size) / 2;
      gl.viewport(xStart,0,size*2,size);
      requestAnimationFrame(Display);
   }

   //
   //  Mouse button pressed
   //
   canvas.onmousedown = function (ev)
   {
      move  = 1;
      x0 = ev.clientX;
      y0 = ev.clientY;
   }

   //
   //  Mouse button released
   //
   canvas.onmouseup = function (ev)
   {
      move  = 0;
   }

   //
   //  Mouse movement
   //
   canvas.onmousemove = function (ev)
   {
      if (move==0) return;
      //  Update angles
      ph += (ev.clientY-y0)/100;
      th += (ev.clientX-x0)/100;
      //  Store location
      x0 = ev.clientX;
      y0 = ev.clientY;
      //  Redisplay
      requestAnimationFrame(Display);
   }
}
